The java driver can be found here: 
https://mongodb.github.io/mongo-java-driver/ 

and the official java documentation can be found here:
https://mongodb.github.io/mongo-java-driver/4.0/. 

MongoDB uses Server Side Public License(SSPL v1.0) and the Apache License v2.0, see here:
https://www.mongodb.com/community/licensing
https://www.mongodb.com/licensing/server-side-public-license
https://www.mongodb.com/licensing/server-side-public-license/faq 
The Apache License v2.0 and SSPL v1.0 allows me to use the software for any purpose that is require for this project, such as using
the service and running the mongodb code.

The way it works is through setting up an TCP with TLS/SSL connection to the server using a cluster link (URI) through a MongoClient. 
Here is where the connection in the code occurs: https://github.com/mongodb/mongo/blob/master/src/mongo/client/async_client.cpp. 
This cluster contains the database where the information is stored, secured by a username and a password for whitelisting. 
Within the database, the storage is different from a file system. The database contains Collections, which act similarly to tables 
in other databases, and Documents represent the actual files, or rows in other databases. These documents are stored in BSON format,
which is explained in more detail here: https://docs.mongodb.com/manual/reference/bson-types/. Essentially, it is similar to JSON, but 
using binary serialization, providing more options for storage. To add files to a specific collection, I use the TCP connection
to send a Document to the database. Can obtain this document through the TCP connection by querying the Documents in that 
Collection using Find() later if needed. This is how Mongodb solves the storage problems. Security problems are also solved by using Mongodb, since 
SQL injections inherently do not work (as there are no SQL formatted method of querying).
